import { useState, useEffect, useRef } from 'react'
import { useCurrency } from '../hooks/useCurrency'
import { GeoAlt, Telephone, Envelope, Globe, Facebook } from 'react-bootstrap-icons'
import axios from 'axios'
import React from 'react'
import useBranding from '../hooks/useBranding'

function InvoiceFooter({ user, branding }) {
  return (
    <div className="invoice-footer">
      <div className="legal-notice">
        This is a computer generated invoice and does not require signing.<br />
        This invoice was generated by <strong>{user?.username}</strong>.
      </div>
      <div className="tagline">
        {branding.tagline}
      </div>
    </div>
  )
}

function InvoicePage({ saleId }) {
  const { formatCurrency } = useCurrency()
  const { branding, loading: brandingLoading } = useBranding()
  const printAreaRef = useRef(null)
  const API_BASE = import.meta.env.VITE_API_BASE || 'http://localhost:3000';

  const [loading, setLoading] = useState(true)
  const [sale, setSale] = useState(null)
  const [patient, setPatient] = useState(null)
  const [agent, setAgent] = useState(null)
  const [cart, setCart] = useState([])
  const [user, setUser] = useState(null)
  const [discount, setDiscount] = useState(0)
  const [discountType, setDiscountType] = useState('fixed')

  useEffect(() => {
    if (!saleId) return
    setLoading(true)
    axios.get(`${API_BASE}/api/sales/${saleId}`)
      .then(async res => {
        const saleData = res.data
        setSale(saleData)
        setPatient(saleData.Patient)
        setAgent(saleData.SalesAgent)
        setUser(saleData.Cashier)
        setDiscount(saleData.discount)
        setDiscountType(saleData.discountType)
        const prodRes = await axios.get(`${API_BASE}/api/products`)
        const cartItems = (saleData.items || saleData.SaleItems || []).map(item => {
          const product = prodRes.data.find(p => p.id === item.productId)
          return product ? { ...product, ...item } : item
        })
        setCart(cartItems)
      })
      .finally(() => setLoading(false))
  }, [saleId, API_BASE]);

  if (loading || brandingLoading) {
    return <div className="d-flex justify-content-center align-items-center py-5"><div className="spinner-border" /></div>
  }
  if (!sale || !cart.length || !user) {
    return <div className="container py-5 text-center"><h4>Invoice data not found.</h4></div>
  }

  const mainItems = cart.filter(item => !item.isSupplementary && !item.supplementaryParentId)
  const getSupplementaryItems = (parentId) => cart.filter(item => item.isSupplementary && item.supplementaryParentId === parentId)

  const currentDate = sale.createdAt ? new Date(sale.createdAt).toLocaleString() : new Date().toLocaleString()
  let invoiceNumber = sale.id || sale.invoiceNumber || sale._id
  if (!invoiceNumber || isNaN(Number(invoiceNumber))) invoiceNumber = 'Draft'

  const getSubtotal = () => {
    let subtotal = 0;
    mainItems.forEach(item => {
      subtotal += item.price * item.quantity;
      getSupplementaryItems(item.productId || item.id).forEach(supp => {
        subtotal += supp.price * supp.quantity;
      });
    });
    return subtotal;
  }
  const getTotal = () => {
    const subtotal = getSubtotal()
    if (!discount || discount <= 0) return subtotal
    if (discountType === 'percent') {
      return subtotal - (subtotal * (discount / 100))
    } else {
      return subtotal - discount
    }
  }

  const logoSrc = branding.logo?.startsWith('/uploads/')
    ? API_BASE + branding.logo
    : branding.logo;

  return (
    <div className="invoice-container" ref={printAreaRef}>
      <style>{`
        @font-face {
          font-family: 'Hind Siliguri';
          src: url('/HindSiliguri-Regular.ttf') format('truetype');
          font-weight: normal;
          font-style: normal;
          font-display: swap;
        }
        .invoice-container {
          width: 210mm;
          min-height: 297mm;
          margin: 0 auto;
          padding: 20mm;
          background: white;
          font-family: 'Hind Siliguri', system-ui, Avenir, Helvetica, Arial, sans-serif;
          font-size: 12px;
          line-height: 1.4;
          color: #000;
          box-sizing: border-box;
          display: flex;
          flex-direction: column;
        }
        .invoice-header {
          border-bottom: 2px solid #000;
          padding-bottom: 15px;
          margin-bottom: 20px;
        }
        .hospital-info {
          display: flex;
          align-items: center;
          margin-bottom: 15px;
        }
        .logo-section {
          flex: 0 0 110px;
          margin-right: 15px;
          display: flex;
          align-items: center;
          flex-shrink: 0;
        }
        .logo-section img {
          max-width: 110px;
          max-height: 110px;
          object-fit: contain;
          display: block;
        }
        .logo-placeholder {
          width: 110px;
          height: 110px;
          background: #f0f0f0;
          border: 1px solid #ddd;
        }
        .hospital-details {
          flex: 1;
        }
        .hospital-name {
          font-size: 1.7rem;
          font-weight: 600;
          margin-bottom: 5px;
        }
        .hospital-contact {
          font-size: 11px;
          color: #333;
        }
        .social-links {
          font-size: 10px;
          color: #666;
          margin-top: 5px;
        }
        .social-links span {
          color: #666;
          margin-right: 10px;
        }
        .invoice-title {
          font-size: 18px;
          font-weight: bold;
          text-align: center;
        }
        .invoice-meta {
          display: grid;
          grid-template-columns: 1fr 1fr;
          gap: 20px;
          margin-bottom: 20px;
          font-size: 12px;
        }
        .invoice-meta-left, .invoice-meta-right {
          display: flex;
          flex-direction: column;
          gap: 6px;
        }
        .invoice-meta-right {
          text-align: right;
        }
        .meta-row {
          display: flex;
          justify-content: space-between;
          align-items: center;
        }
        .meta-label {
          font-weight: bold;
          color: #333;
        }
        .meta-value {
          color: #000;
        }
        .invoice-table {
          width: 100%;
          border-collapse: collapse;
          margin-bottom: 20px;
        }
        .invoice-table th {
          background:rgb(202, 202, 202);
          border: 1px solid #000;
          padding: 8px;
          text-align: center;
          font-weight: bold;
          font-size: 12px;
        }
        .invoice-table td {
          border: 1px solid #000;
          padding: 6px 8px;
          font-size: 13px;
        }
        .product-name {
          font-weight: bold;
        }
        .supplementary-item {
          padding-left: 20px !important;
          font-size: 10px;
          color: #666;
        }
        .text-center {
          text-align: center;
        }
        .text-right {
          text-align: right;
        }
        .totals-section {
          display: flex;
          justify-content: flex-end;
          margin-bottom: 30px;
        }
        .totals-table {
          width: 250px;
          border-collapse: collapse;
        }
        .totals-table td {
          padding: 4px 8px;
          border: none;
        
        }
        .totals-table .total-row {
          border-top: 1px solid #000;
          font-weight: bold;
        }
        .totals-table .total-amount {
          font-size: 1.5rem;
          font-weight: 600;
          color: #000;
        }
        .invoice-footer {
          margin-top: auto !important;
          text-align: center;
        }
        .legal-notice {
          font-size: 10px;
          color: #666;
          font-style: italic;
          margin-bottom: 15px;
          line-height: 1.3;
        }
        .tagline {
          font-size: 12px;
          font-weight: bold;
          border-top: 1px solid #000;
          padding-top: 10px;
        }
        @media print {
          @page {
            size: A4;
            margin: 0;
          }
          body {
            margin: 0;
            padding: 0;
          }
          .invoice-container {
            width: 100% !important;
            margin: 0 !important;
            padding: 20mm !important;
            box-shadow: none !important;
            border: none !important;
            display: block !important;
            min-height: unset !important;
          }
          .invoice-table {
            page-break-inside: auto !important;
          }
          .invoice-table tr {
            page-break-inside: avoid !important;
            page-break-after: auto !important;
          }
          .social-links {
            display: block !important;
          }
          .social-links a {
            color: #666 !important;
            text-decoration: none !important;
          }
          .invoice-title::before,
          .invoice-title::after {
            background: #000 !important;
            display: block !important;
          }
          .invoice-footer {
            margin-top: auto !important;
          }
        }
      `}</style>
      {/* Header */}
      <div className="invoice-header">
        <div className="hospital-info">
          <div className="logo-section">
            {branding.logo ? (
              <img src={logoSrc} alt="Logo" />
            ) : (
              <div className="logo-placeholder"></div>
            )}
          </div>
          <div className="hospital-details">
            <div className="hospital-name">{branding.hospitalName}</div>
            <div className="hospital-contact">
              {branding.address && (
                <div><GeoAlt size={10} style={{ marginRight: 5 }} />{branding.address}</div>
              )}
              {(branding.contactNumber || branding.email) && (
                <div style={{ display: 'flex', alignItems: 'center', gap: 12 }}>
                  {branding.contactNumber && (
                    <span><Telephone size={10} style={{ marginRight: 5 }} />{branding.contactNumber}</span>
                  )}
                  {branding.email && (
                    <span><Envelope size={10} style={{ marginRight: 5 }} />{branding.email}</span>
                  )}
                </div>
              )}
            </div>
            {(branding.facebookId || branding.website) && (
              <div className="social-links">
                {branding.website && (
                  <span><Globe size={10} style={{ marginRight: 5 }} />{branding.website}</span>
                )}
                {branding.facebookId && (
                  <span><Facebook size={10} style={{ marginRight: 5 }} />{branding.facebookId}</span>
                )}
              </div>
            )}
          </div>
        </div>
        <div className="d-flex align-items-center justify-content-center my-3">
          <hr />
          <div className="invoice-title">SALES INVOICE</div>
          <hr />
        </div>
        <div className="invoice-meta">
          <div className="invoice-meta-left">
            <div className="meta-row">
              <span className="meta-label">Date:</span>
              <span className="meta-value">{currentDate}</span>
            </div>
            {patient && (
              <>
                <div className="meta-row">
                  <span className="meta-label">Patient:</span>
                  <span className="meta-value">{patient.name}</span>
                </div>
                {patient.phone && (
                  <div className="meta-row">
                    <span className="meta-label">Phone:</span>
                    <span className="meta-value">{patient.phone}</span>
                  </div>
                )}
              </>
            )}
          </div>
          <div className="invoice-meta-right">
            <div className="meta-row">
              <span className="meta-label">Invoice ID:</span>
              <span className="meta-value">{invoiceNumber}</span>
            </div>
            {agent && (
              <div className="meta-row">
                <span className="meta-label">Sales Agent:</span>
                <span className="meta-value">{agent.name}</span>
              </div>
            )}
          </div>
        </div>
      </div>
      {/* Items Table */}
      <table className="invoice-table">
        <thead>
          <tr>
            <th style={{ width: '6%' }}>Sl.</th>
            <th style={{ width: '44%' }}>Product</th>
            <th style={{ width: '15%' }}>Qty</th>
            <th style={{ width: '17.5%' }}>Price</th>
            <th style={{ width: '17.5%' }}>Total</th>
          </tr>
        </thead>
        <tbody>
          {(() => {
            let sl = 1;
            const rows = [];
            mainItems.forEach((item) => {
              if (!item.isSupplementary && !item.supplementaryParentId) {
                rows.push(
                  <tr key={item.id}>
                    <td className="text-center">{sl++}</td>
                    <td className="product-name">{item.name}</td>
                    <td className="text-center">{item.quantity}</td>
                    <td className="text-right">{formatCurrency(item.price)}</td>
                    <td className="text-right">{formatCurrency(item.price * item.quantity)}</td>
                  </tr>
                );
                getSupplementaryItems(item.productId || item.id).forEach((supp) => {
                  rows.push(
                    <tr key={item.id + '-' + supp.id}>
                      <td className="text-center">{sl++}</td>
                      <td className="supplementary-item">+ {supp.name}</td>
                      <td className="text-center supplementary-item">{supp.quantity}</td>
                      <td className="text-right supplementary-item">{formatCurrency(supp.price)}</td>
                      <td className="text-right supplementary-item">{formatCurrency(supp.price * supp.quantity)}</td>
                    </tr>
                  );
                });
              }
            });
            return rows;
          })()}
        </tbody>
      </table>
      {/* Totals */}
      <div className="totals-section">
        <table className="totals-table">
          <tbody>
            <tr>
              <td>Subtotal:</td>
              <td className="text-right">{formatCurrency(getSubtotal())}</td>
            </tr>
            {Number(discount) > 0 && (
              <tr>
                <td>Discount:</td>
                <td className="text-right">-{formatCurrency(discountType === 'percent' ? (getSubtotal() * discount / 100) : discount)}</td>
              </tr>
            )}
            <tr className="total-row">
              <td>Total:</td>
              <td className="text-right total-amount">{formatCurrency(getTotal())}</td>
            </tr>
          </tbody>
        </table>
      </div>
      {/* Footer */}
      <InvoiceFooter user={user} branding={branding} />
    </div>
  )
}

export default InvoicePage 